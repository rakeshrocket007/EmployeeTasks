@page "/addemployee"
@using EmployeeBlazorServerApp.Services;
@using TestApp.Dtos;
@inject EmployeeService employeeService;

<PageTitle>Add Employee</PageTitle>

<h1>Add Employee</h1>

@if(Employee is not null)
{
        <EditForm Model="@Employee" OnValidSubmit="@HandleValidSubmit"
          OnInvalidSubmit="@HandleInvalidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="firstname" class="form-label">Firstname</label>
            <InputText id="firstname" class="form-control"
                   @bind-Value="Employee.FirstName" />
            @*<ValidationMessage For="() => Employee.FirstName"/>*@
        </div>

        <div class="mb-3">
            <label for="lastname" class="form-label">Lastname</label>
            <InputText id="lastname" class="form-control"
                   @bind-Value="Employee.LastName" />
            @*<ValidationMessage For="() => Employee.LastName"/>*@
        </div>

        <button type="submit" class="btn btn-primary" disabled="@IsBusy">Add</button>
    </EditForm>

    @if (SuccessMessage is not null)
    {
        <br />
        <div class="alert alert-success">@SuccessMessage</div>
    }

    @if (ErrorMessage is not null)
    {
        <br />
        <div class="alert alert-danger">@ErrorMessage</div>
    }
}


@code {
    public EmployeeDto Employee;

    private string? SuccessMessage { get; set; }

    private string? ErrorMessage { get; set; }

    private bool IsBusy { get; set; }

    protected override void OnInitialized()
    {
        Employee = new EmployeeDto();
    }

    private async Task HandleValidSubmit()
    {
        if (IsBusy)
        {
            return;
        }

        IsBusy = true;

        try
        {
            if (Employee is not null)
            {
                Random randome = new Random();

                var randomTaskCount = randome.Next(2, 5);
                Employee.Tasks = new List<TaskDto>();
                for (int i = 0; i < randomTaskCount; i++) Employee.Tasks.Add(new TaskDto() { Description = "Dummy Task Added " + DateTime.Now.ToShortDateString() });

                var isSuccess = await employeeService.AddEmployee(Employee);

                if (isSuccess)
                {
                    SuccessMessage = $"Employee {Employee.FirstName} {Employee.LastName} with {randomTaskCount} random tasks was added successfully.";
                    ErrorMessage = null;
                }
                else
                {
                    SuccessMessage = null;
                    ErrorMessage = $"Error while adding employee.";
                }

                // New Employee for next creation
                Employee = new EmployeeDto();
            }
        }
        catch (Exception ex)
        {
            SuccessMessage = null;
            ErrorMessage = $"Error while adding employee: {ex.Message}";
        }
        finally
        {
            IsBusy = false;
        }
    }

    private void HandleInvalidSubmit()
    {
        SuccessMessage = null;
        ErrorMessage = null;
    }

}
